Select *
From [Nashville Housing]

-- REMOVING TIME FROM THE DATE 



Select SaleDate, CONVERT(Date, SaleDate)
From [Nashville Housing]

Select SaleDateConverted, CONVERT(Date, SaleDate)
From [Nashville Housing]

Update [Nashville Housing]
SET SaleDate = CONVERT(Date, SaleDate)

ALTER TABLE [Nashville Housing]
Add SaleDateConverted Date;

UPDATE [Nashville Housing]
SET SaleDateConverted = CONVERT(Date, SaleDate)




-- Populating Property Address Data 

Select *
From [Nashville Housing]
--Where PropertyAddress is NULL
order by ParcelID



Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress
From [Nashville Housing] a
JOIN [Nashville Housing] b
   on a.ParcelID = b.ParcelID
   AND a.[UniqueID ]<> b.[UniqueID ]
   Where a.PropertyAddress is NULL


Select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Nashville Housing] a
JOIN [Nashville Housing] b
   on a.ParcelID = b.ParcelID
   AND a.[UniqueID ]<> b.[UniqueID ]
Where a.PropertyAddress is NULL


--Updating to remove the Null 

UPDATE a
SET PropertyAddress =  ISNULL(a.PropertyAddress, b.PropertyAddress)
From [Nashville Housing] a
JOIN [Nashville Housing] b
   on a.ParcelID = b.ParcelID
   AND a.[UniqueID ]<> b.[UniqueID ]
Where a.PropertyAddress is NULL


--Lets take a look at the Property address

Select PropertyAddress
FROM [Nashville Housing]


-- Breaking out Address into Individual Columns (Address, City, State)

SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) as Address
,  SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress)) as Address

FROM [Nashville Housing]

-- CREATING TWO NEW COLUMNS


ALTER TABLE [Nashville Housing]
Add PropertySplitAddress Nvarchar(255);

UPDATE [Nashville Housing]
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) 

ALTER TABLE [Nashville Housing]
Add PropertySplitCity Nvarchar(255);

UPDATE [Nashville Housing]
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))


SELECT*
FROM [Nashville Housing]



SELECT OwnerAddress
FROM [Nashville Housing]





SELECT
PARSENAME (REPLACE(OwnerAddress, ',',  ','), 3)
, PARSENAME (REPLACE(OwnerAddress, ',',  ','), 2)
, PARSENAME (REPLACE(OwnerAddress, ',',  ','), 1)
FROM [Nashville Housing]



ALTER TABLE [Nashville Housing]
Add OwnerSplitAddress Nvarchar(255);

UPDATE [Nashville Housing]
SET OwnerSplitAddress = PARSENAME (REPLACE(OwnerAddress, ',',  ','), 3) 

ALTER TABLE [Nashville Housing]
Add OwnerSplitCity  Nvarchar(255)

UPDATE [Nashville Housing]
SET OwnerSplitCity = PARSENAME (REPLACE(OwnerAddress, ',',  ','), 2)

ALTER TABLE [Nashville Housing]
Add OwnerSplitState Nvarchar(255);

UPDATE [Nashville Housing]
SET OwnerSplitState = PARSENAME (REPLACE(OwnerAddress, ',',  ','), 1)




--Turning Y to N to Yes and No in 'sold as vacant' field

SELECT Distinct(SoldAsVacant)
FROM [Nashville Housing]


SELECT Distinct(SoldAsVacant), Count(SoldAsVacant)
FROM [Nashville Housing]
GROUP BY SoldAsVacant
Order by 2


Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
       When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
FROM [Nashville Housing]


UPDATE [Nashville Housing]
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
       When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END




--REMOVING DUPLICATES

--writing CTE to find where there are duplicate values.
--Partitioning on things that are unique to each Row

With RowNumCTE AS(
SELECT*,
       ROW_NUMBER() OVER (
	   PARTITION BY ParcelID,
	                PropertyAddress,
					SalePrice,
					SaleDate,
					LegalReference
					Order by 
					       UniqueID
						   )Row_Num
FROM [Nashville Housing]
--Order By ParcelID
)

SELECT*
FROM RowNumCTE
Where Row_Num > 1
Order By PropertyAddress



--DELETE FUNCTION
With RowNumCTE AS(
SELECT*,
       ROW_NUMBER() OVER (
	   PARTITION BY ParcelID,
	                PropertyAddress,
					SalePrice,
					SaleDate,
					LegalReference
					Order by 
					       UniqueID
						   )Row_Num
FROM [Nashville Housing]
--Order By ParcelID
)

DELETE
FROM RowNumCTE
Where Row_Num > 1
--Order By PropertyAddress


--Checking If Duplicates are still existing
With RowNumCTE AS(
SELECT*,
       ROW_NUMBER() OVER (
	   PARTITION BY ParcelID,
	                PropertyAddress,
					SalePrice,
					SaleDate,
					LegalReference
					Order by 
					       UniqueID
						   )Row_Num
FROM [Nashville Housing]
--Order By ParcelID
)

SELECT*
FROM RowNumCTE
Where Row_Num > 1
Order By PropertyAddress


--DELETING UNUSED COLUMNS 

SELECT*
FROM [Nashville Housing]



ALTER TABLE [Nashville Housing]
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress

ALTER TABLE [Nashville Housing]
DROP COLUMN SaleDate


SELECT * FROM [Nashville Housing]
Where OwnerName IS NOT NULL
And LandValue IS NOT NULL
And Acreage IS NOT NULL
AND LandValue IS NOT NULL
AND BuildingValue IS NOT NULL
AND TotalValue IS NOT NULL
AND YearBuilt IS NOT NULL
AND Bedrooms IS NOT NULL
AND FullBath IS NOT NULL
AND HalfBath IS NOT NULL
AND OwnerSplitAddress IS NOT NULL
AND OwnerSplitCity IS NOT NULL
AND OwnerSplitState IS NOT NULL;
